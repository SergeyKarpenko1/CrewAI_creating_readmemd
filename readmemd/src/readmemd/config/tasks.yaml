gather_project_info_task:
  description: >
    Use the RecursiveDirectoryScanner tool and pass the path {project_directory}
    as the 'directory' argument. It should recursively scan all folders and files
    in the project, including source code, configuration files, documentation,
    and any other relevant materials.

    The goal is to collect as much information as possible about the project,
    which will be used later to generate a complete README.md.

    Pay attention to
    - The purpose of the project;
    - Technologies and libraries used;
    - Directory structure;
    - Installation and startup instructions (if available);
    - API and licenses (if applicable);
    - Any other useful information for documentation.

  expected_output: >
    A structured overview of the project containing essential details needed
    to generate the README.md.

  output_file: output/project_info.json
  async_execution: false
  agent: project_info_gatherer

read_file_contents_task:
  description: >
    For each file found in the project structure (from project_info.json), 
    read its content using the FileReadTool. Extract useful information needed 
    for generating the README.md.

    Focus on the following aspects:
    - Project purpose: what the project does and what problems it solves;
    - Installation and startup: instructions for installing dependencies, running the project, environment variables;
    - Project architecture: main components and how they interact;
    - Usage: how should the user work with the project? Are there examples of running or testing it?
    - API: if the project provides an API, describe its structure, available endpoints, inputs and outputs;
    - License: find and define the license terms;
    - Any other information useful for documentation.

    All collected information should be well-structured and ready to be used when composing the README.md.

  expected_output: >
    Structured data extracted from the project files, including installation instructions, 
    architecture overview, API description, usage examples, and license information.

  input_file: output/project_info.json
  output_file: output/readme_data.json
  async_execution: false
  agent: file_content_reader

generate_readme_task:
  description: >
    Generate a detailed file README.md in English and Russian based on structured data in the readme_data.json file.
    The README should follow this structure

    1. Introduction — brief overview of the project, its goals and domain.
    2. Features — key capabilities and functions.
    3. Technologies and Libraries:
       - Core frameworks and architecture
       - Installed libraries (from requirements.txt, pyproject.toml, etc.)
    4. Project Architecture — key files and their responsibilities.
    5. Installation and Running
       - Dependency installation steps
       - Local launch and Docker instructions (if Dockerfile/docker-compose.yml present)
       - Required environment variables
    6. How It Works — explain the internal processing, how the system handles requests.
    7. Additional Info — topic/domain specialization (if any)
    8. License — extract from LICENSE file or default to MIT if not found.

    The README must be
    - Written in Markdown
    - Easy to read
    - Include code examples if found
    - Up to date with the current state of the project

  expected_output: >
    A ready-to-publish README.md file that accurately reflects the project, formatted according to best practices.

  input_file: output/readme_data.json
  output_file: output/README.md
  async_execution: false
  agent: readme_generator